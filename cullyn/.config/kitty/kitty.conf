# vim:fileencoding=utf-8:foldmethod=marker

#: Fonts {{{

font_family      Fira Code
bold_font        auto
italic_font      auto
bold_italic_font auto

font_size 14.0
force_ltr no

symbol_map U+23FB-U+23FE,U+2665,U+26A1,U+2B58,U+E000-U+E00A,U+E0A0-U+E0A3,U+E0B0-U+E0C8,U+E0CA,U+E0CC-U+E0D2,U+E0D4,U+E200-U+E2A9,U+E300-U+E3E3,U+E5FA-U+E62F,U+E700-U+E7C5,U+F000-U+F2E0,U+F300-U+F31C,U+F400-U+F4A9,U+F500-U+F8FF Symbols Nerd Font

disable_ligatures never

box_drawing_scale 0.001, 1, 1.5, 2

#: }}}

#: Cursor customization {{{

cursor none
cursor_shape beam
cursor_beam_thickness 1.5
cursor_underline_thickness 2.0
cursor_blink_interval -1
cursor_stop_blinking_after 9

#: }}}

#: Scrollback {{{

scrollback_lines 2000
scrollback_pager nvimpager
scrollback_pager_history_size 0
scrollback_fill_enlarged_window no
wheel_scroll_multiplier 5
wheel_scroll_min_lines 1

#: }}}

#: Mouse {{{

mouse_hide_wait -1.0
url_color #9ece6a
url_style double
open_url_with default
url_prefixes file ftp ftps gemini git gopher http https irc ircs kitty mailto news sftp ssh
detect_urls yes
copy_on_select no
paste_actions quote-urls-at-prompt,confirm
strip_trailing_spaces smart
select_by_word_characters @-./_~?&=%+#
click_interval -1.0
focus_follows_mouse no
pointer_shape_when_grabbed arrow
default_pointer_shape beam
pointer_shape_when_dragging beam

clear_all_mouse_actions yes

mouse_map shift+left click grabbed,ungrabbed mouse_handle_click selection link prompt

mouse_map ctrl+shift+left release grabbed,ungrabbed mouse_handle_click link
mouse_map ctrl+shift+left press grabbed discard_event

mouse_map left press ungrabbed mouse_selection normal
mouse_map left doublepress ungrabbed mouse_selection word
mouse_map left triplepress ungrabbed mouse_selection line
mouse_map shift+left press ungrabbed,grabbed mouse_selection normal
mouse_map shift+left doublepress ungrabbed,grabbed mouse_selection word
mouse_map shift+left triplepress ungrabbed,grabbed mouse_selection line

mouse_map right press ungrabbed mouse_selection extend
mouse_map shift+right press ungrabbed,grabbed mouse_selection extend

mouse_map middle release ungrabbed paste_from_selection
mouse_map shift+middle release ungrabbed,grabbed paste_selection
mouse_map shift+middle press grabbed discard_event

mouse_map ctrl+shift+right press ungrabbed mouse_show_command_output

#: }}}

#: Terminal bell {{{

enable_audio_bell yes
visual_bell_duration 0.0
visual_bell_color none
window_alert_on_bell yes
bell_on_tab " "
command_on_bell none
bell_path none

#: }}}

#: Tab bar {{{

tab_bar_edge top
tab_bar_margin_width 0.0
tab_bar_margin_height 0.0 0.0


tab_bar_style fade

#: custom
#:     A user-supplied Python function called draw_tab is loaded from the file
#:     tab_bar.py in the kitty config directory. For examples of how to
#:     write such a function, see the functions named draw_tab_with_* in
#:     kitty's source code: kitty/tab_bar.py. See also
#:     this discussion <https://github.com/kovidgoyal/kitty/discussions/4447>
#:     for examples from kitty users.

tab_bar_align center
tab_bar_min_tabs 2
tab_switch_strategy previous


tab_powerline_style round

#: The powerline separator style between tabs in the tab bar when
#: using powerline as the tab_bar_style, can be one of: angled,
#: slanted, round.

tab_activity_symbol 

tab_title_template "{fmt.fg.red}{bell_symbol}{activity_symbol}{fmt.fg.tab}{title}"

active_tab_title_template none

active_tab_foreground   #ff9e64
active_tab_background   #2c354c
active_tab_font_style   bold-italic
inactive_tab_foreground #5784d5
inactive_tab_background #24283b
inactive_tab_font_style normal

tab_bar_background #1f2335
tab_bar_margin_color #24283b

#: }}}

#: Color scheme {{{

foreground #a9b1d6
background #24283b

selection_foreground #2c354c
selection_background #5784d5

#: black
color0 #1a1b26
color8 #3f4e74

#: red
color1 #f7768e
color9 #ff8ba2

#: green
color2  #9ece6a
color10 #b7e882

#: yellow
color3  #ff9e64
color11 #ffb67a

#: blue
color4  #7aa2f7
color12 #91b7ff

#: magenta
color5  #bb9af7
color13 #d2b0ff

#: cyan
color6  #73daca
color14 #8ef5e4

#: white
color7  #a9b1d6
color15 #c0caf5

mark1_foreground black
mark1_background #86caf6

mark2_foreground black
mark2_background #cfc9c2

mark3_foreground black
mark3_background #f896d6

#: }}}

#: Keyboard shortcuts {{{

# : Core {{{

kitty_mod ctrl+shift
clear_all_shortcuts yes

action_alias launch_tab launch --type=tab --cwd=current

#TODO set more aliases (kitten aliases?)

# }}}

#: Clipboard {{{

map kitty_mod+y copy_to_clipboard
map kitty_mod+d combine : copy_to_clipboard : clear_selection
map kitty_mod+v paste_from_clipboard
map kitty_mod+g paste_from_selection

# }}}

#: Scrolling {{{

#: Scroll line up

map kitty_mod+up            scroll_line_up
map kitty_mod+down          scroll_line_down
map kitty_mod+super+up      scroll_page_up
map kitty_mod+super+down    scroll_page_down
map kitty_mod+home          scroll_home
map kitty_mod+end           scroll_end

#: Scroll to previous shell prompt

map kitty_mod+? scroll_to_prompt -1

#::  Use a parameter of 0 for scroll_to_prompt to scroll to the last
#::  jumped to or the last clicked position. Requires shell
#::  integration <https://sw.kovidgoyal.net/kitty/shell-integration/>
#::  to work.

#: Scroll to next shell prompt

map kitty_mod+? sroll_to_prompt 1

#: Browse scrollback buffer in pager

map kitty_mod+p>a show_scrollback

#::  You can pipe the contents of the current screen and history
#::  buffer as STDIN to an arbitrary program using launch --stdin-
#::  source. For example, the following opens the scrollback buffer in
#::  less in an overlay window::

# map kitty_mod+p launch --stdin-source=@screen_scrollback --stdin-add-formatting --type=overlay less +G -R

#::  For more details on piping screen and buffer contents to external
#::  programs, see launch <https://sw.kovidgoyal.net/kitty/launch/>.

#: Browse output of the last shell command in pager

map kitty_mod+p>c show_last_command_output

#::  You can also define additional shortcuts to get the command
#::  output. For example, to get the first command output on screen::

#::      map f1 show_first_command_output_on_screen

#::  To get the command output that was last accessed by a keyboard
#::  action or mouse action::

#::      map f1 show_last_visited_command_output

#::  You can pipe the output of the last command run in the shell
#::  using the launch action. For example, the following opens the
#::  output in less in an overlay window::

#::      map f1 launch --stdin-source=@last_cmd_output --stdin-add-formatting --type=overlay less +G -R

#::  To get the output of the first command on the screen, use
#::  @first_cmd_output_on_screen. To get the output of the last jumped
#::  to command, use @last_visited_cmd_output.

#::  Requires shell integration
#::  <https://sw.kovidgoyal.net/kitty/shell-integration/> to work.

#: }}}

#: Tab management {{{

map ctrl+Next       next_tab
map ctrl+Prior      previous_tab
map kitty_mod+t     new_tab
map kitty_mod+w     close_tab

#: Close OS window

# map shift+cmd+w close_os_window

#: Move tab forward

# map kitty_mod+. move_tab_forward

#: Move tab backward

# map kitty_mod+, move_tab_backward

#: Set tab title

# map kitty_mod+alt+t set_tab_title
# map shift+cmd+i     set_tab_title

#: You can also create shortcuts to go to specific tabs, with 1 being
#: the first tab, 2 the second tab and -1 being the previously active
#: tab, and any number larger than the last tab being the last tab::

map kitty_mod+n>s goto_tab 1
map kitty_mod+n>e goto_tab 2
map kitty_mod+n>t goto_tab 3

#: Just as with new_window above, you can also pass the name of
#: arbitrary commands to run when using new_tab and new_tab_with_cwd.
#: Finally, if you want the new tab to open next to the current tab
#: rather than at the end of the tabs list, use::

#:     map ctrl+t new_tab !neighbor [optional cmd to run]
#: }}}

#: Layout management {{{

#: Next layout

# map kitty_mod+l next_layout


#: You can also create shortcuts to switch to specific layouts::

#:     map ctrl+alt+t goto_layout tall
#:     map ctrl+alt+s goto_layout stack

#: Similarly, to switch back to the previous layout::

#:     map ctrl+alt+p last_used_layout

#: There is also a toggle_layout action that switches to the named
#: layout or back to the previous layout if in the named layout.
#: Useful to temporarily "zoom" the active window by switching to the
#: stack layout::

#:     map ctrl+alt+z toggle_layout stack
#: }}}

#: Font sizes {{{

#: You can change the font size for all top-level kitty OS windows at
#: a time or only the current one.

#: Increase font size

map kitty_mod+equal       change_font_size all +2.0
map kitty_mod+minus       change_font_size all -2.0

#: Reset font size

map kitty_mod+backspace change_font_size all 0


#: To setup shortcuts for specific font sizes::

#:     map kitty_mod+f6 change_font_size all 10.0

#: To setup shortcuts to change only the current OS window's font
#: size::

#:     map kitty_mod+f6 change_font_size current 10.0
#: }}}

#: Select and act on visible text {{{

#: Use the hints kitten to select text and either pass it to an
#: external program or insert it into the terminal or copy it to the
#: clipboard.

#: Open URL

map kitty_mod+f open_url_with_hints

#::  Open a currently visible URL using the keyboard. The program used
#::  to open the URL is specified in open_url_with.

#: Insert selected path

map kitty_mod+?>f kitten hints --type path --program -

#::  Select a path/filename and insert it into the terminal. Useful,
#::  for instance to run git commands on a filename output from a
#::  previous git command.

#: Open selected path

map kitty_mod+?>shift+f kitten hints --type path

#::  Select a path/filename and open it with the default open program.

#: Insert selected line

map kitty_mod+?>l kitten hints --type line --program -

#::  Select a line of text and insert it into the terminal. Useful for
#::  the output of things like: `ls -1`.

#: Insert selected word

map kitty_mod+?>w kitten hints --type word --program -

#::  Select words and insert into terminal.

#: Insert selected hash

map kitty_mod+?>h kitten hints --type hash --program -

#::  Select something that looks like a hash and insert it into the
#::  terminal. Useful with git, which uses SHA1 hashes to identify
#::  commits.

#: Open the selected file at the selected line

map kitty_mod+?>n kitten hints --type linenum

#::  Select something that looks like filename:linenum and open it in
#::  vim at the specified line number.

#: Open the selected hyperlink

map kitty_mod+?>y kitten hints --type hyperlink

#::  Select a hyperlink (i.e. a URL that has been marked as such by
#::  the terminal program, for example, by `ls --hyperlink=auto`).


#: The hints kitten has many more modes of operation that you can map
#: to different shortcuts. For a full description see hints kitten
#: <https://sw.kovidgoyal.net/kitty/kittens/hints/>.
#: }}}

#: Miscellaneous {{{

#: Show documentation

map kitty_mod+f1 show_kitty_doc overview

#: Toggle fullscreen

# map kitty_mod+f11 toggle_fullscreen

#: Toggle maximized

map kitty_mod+f10 toggle_maximized

#: Toggle macOS secure keyboard entry

map opt+cmd+s toggle_macos_secure_keyboard_entry

#: Unicode input

map kitty_mod+u    kitten unicode_input
map ctrl+cmd+space kitten unicode_input

#: Edit config file

map kitty_mod+f2 edit_config_file
map cmd+,        edit_config_file

#: Open the kitty command shell

map kitty_mod+escape kitty_shell window

#::  Open the kitty shell in a new window / tab / overlay / os_window
#::  to control kitty using commands.

#: Increase background opacity

map kitty_mod+a>m set_background_opacity +0.1

#: Decrease background opacity

map kitty_mod+a>l set_background_opacity -0.1

#: Make background fully opaque

map kitty_mod+a>1 set_background_opacity 1

#: Reset background opacity

map kitty_mod+a>d set_background_opacity default

#: Reset the terminal

map kitty_mod+delete clear_terminal reset active
map opt+cmd+r        clear_terminal reset active

#::  You can create shortcuts to clear/reset the terminal. For
#::  example::

#::      # Reset the terminal
#::      map f1 clear_terminal reset active
#::      # Clear the terminal screen by erasing all contents
#::      map f1 clear_terminal clear active
#::      # Clear the terminal scrollback by erasing it
#::      map f1 clear_terminal scrollback active
#::      # Scroll the contents of the screen into the scrollback
#::      map f1 clear_terminal scroll active
#::      # Clear everything up to the line with the cursor
#::      map f1 clear_terminal to_cursor active

#::  If you want to operate on all kitty windows instead of just the
#::  current one, use all instead of active.

#::  It is also possible to remap Ctrl+L to both scroll the current
#::  screen contents into the scrollback buffer and clear the screen,
#::  instead of just clearing the screen, for example, for ZSH add the
#::  following to ~/.zshrc:

#::  .. code-block:: zsh

#::      scroll-and-clear-screen() {
#::          printf '\n%.0s' {1..$LINES}
#::          zle clear-screen
#::      }
#::      zle -N scroll-and-clear-screen
#::      bindkey '^l' scroll-and-clear-screen

#: Clear up to cursor line

map cmd+k clear_terminal to_cursor active

#: Reload kitty.conf

map kitty_mod+f5 load_config_file
map ctrl+cmd+,   load_config_file

#::  Reload kitty.conf, applying any changes since the last time it
#::  was loaded. Note that a handful of options cannot be dynamically
#::  changed and require a full restart of kitty. Particularly, when
#::  changing shortcuts for actions located on the macOS global menu
#::  bar, a full restart is needed. You can also map a keybinding to
#::  load a different config file, for example::

#::      map f5 load_config /path/to/alternative/kitty.conf

#::  Note that all options from the original kitty.conf are discarded,
#::  in other words the new configuration *replace* the old ones.

#: Debug kitty configuration

map kitty_mod+f6 debug_config
map opt+cmd+,    debug_config

#::  Show details about exactly what configuration kitty is running
#::  with and its host environment. Useful for debugging issues.

#: Send arbitrary text on key presses

#::  E.g. map ctrl+shift+alt+h send_text all Hello World

#::  You can tell kitty to send arbitrary (UTF-8) encoded text to the
#::  client program when pressing specified shortcut keys. For
#::  example::

#::      map ctrl+alt+a send_text all Special text

#::  This will send "Special text" when you press the Ctrl+Alt+A key
#::  combination. The text to be sent is a python string literal so
#::  you can use escapes like \x1b to send control codes or \u21fb to
#::  send Unicode characters (or you can just input the Unicode
#::  characters directly as UTF-8 text). You can use `kitty +kitten
#::  show_key` to get the key escape codes you want to emulate.

#::  The first argument to send_text is the keyboard modes in which to
#::  activate the shortcut. The possible values are normal,
#::  application, kitty or a comma separated combination of them. The
#::  modes normal and application refer to the DECCKM cursor key mode
#::  for terminals, and kitty refers to the kitty extended keyboard
#::  protocol. The special value all means all of them.

#::  Some more examples::

#::      # Output a word and move the cursor to the start of the line (like typing and pressing Home)
#::      map ctrl+alt+a send_text normal Word\x1b[H
#::      map ctrl+alt+a send_text application Word\x1bOH
#::      # Run a command at a shell prompt (like typing the command and pressing Enter)
#::      map ctrl+alt+a send_text normal,application some command with arguments\r

#: Open kitty Website

map shift+cmd+/ open_url https://sw.kovidgoyal.net/kitty/

#: }}}

#: }}}

#: Advanced {{{

wayland_titlebar_color  system
linux_display_server wayland

shell .
editor .
close_on_child_death no
allow_remote_control no
listen_on none
update_check_interval 0
startup_session none
clipboard_control write-clipboard write-primary read-clipboard-ask read-primary-ask
clipboard_max_size 64
term xterm-kitty

repaint_delay 10
input_delay 3
sync_to_monitor yes

#: }}}
