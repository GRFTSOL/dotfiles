#!/usr/bin/env bash

timer () {
    IFS=":" read -ra timer <<<"$(tail -n 1 "/tmp/eww/timer")"
    hr=${timer[0]#0}
    min=${timer[1]#0}

    if [[ "$1" == "up" ]]; then
        ((min+=$2))
        if [[ $min -ge 60 ]]; then
            ((hr+=1))
            ((min-=60))
        fi
    elif [[ $hr -gt 0 ]] || [[ $min -gt 0 ]]; then
            ((min-=$2))
    fi

    if [[ $min -lt 0 ]] && [[ $hr -gt 0 ]]; then
        ((hr-=1))
        ((min+=60))
    fi

    if [[ $min -lt 0 ]]; then
        min=0
    fi

    printf "%02d:%02d\n" "$hr" "$min" >> "/tmp/eww/timer"
}

timer_status () {
    countdown=false
    if [[ $1 == "start" ]]; then
       countdown=true
       notify-send "timer started!"
    fi

    while "$countdown"; do
        IFS=":" read -ra timer <<<"$(tail -n 1 "/tmp/eww/timer")"
        hr=${timer[0]#0}
        min=${timer[1]#0}

        if [[ $hr -eq 0 ]] && [[ $min -eq 0 ]]; then
            countdown=false
            notify-send "timer done!"
            eww update timer-visible="true"
            sleep 5
            eww update timer-visible="false"
            break
        fi

        if [[ $((min % 15)) -eq 0 ]] || [[ $min -le 5 ]]; then
            eww update timer-visible="true"
            eww update minute-active="true"
            sleep 2
            eww update timer-visible="false"
            eww update minute-active="false"
        fi

        until_next_min=$(( 60 - $(date +%-S) ))
        sleep "$until_next_min"
        timer "down" 1
    done
}

alarm () {
    IFS=":" read -ra alarm <<<"$(tail -n 1 "/tmp/eww/alarm")"
    hr=${alarm[0]#0}
    min=${alarm[1]#0}

    if [[ "$1" == "up" ]]; then
        ((min+=$2))
        if [[ $min -ge 60 ]]; then
            ((hr+=1))
            ((min-=60))
        fi
    elif [[ $hr -gt 0 ]] || [[ $min -gt 0 ]]; then
            ((min-=$2))
    fi

    if [[ $min -lt 0 ]] && [[ $hr -gt 0 ]]; then
        ((hr-=1))
        ((min+=60))
    fi

    if [[ $hr -ge 24 ]]; then
        hr=0
    fi

    if [[ $min -lt 0 ]]; then
        min=0
    fi

    printf "%02d:%02d\n" "$hr" "$min" >> "/tmp/eww/alarm"
}


alarm_status () {
    countdown=false
    if [[ $1 == "start" ]]; then
       countdown=true
       notify-send "timer started!"
    fi

    while "$countdown"; do
        IFS=":" read -ra timer <<<"$(tail -n 1 "/tmp/eww/alarm")"
        hr=${timer[0]#0}
        min=${timer[1]#0}

        if [[ $hr -eq 0 ]] && [[ $min -eq 0 ]]; then
            countdown=false
            notify-send "timer done!"
            eww update timer-visible="true"
            sleep 5
            eww update timer-visible="false"
            break
        fi

        if [[ $((min % 15)) -eq 0 ]] || [[ $min -le 5 ]]; then
            eww update timer-visible="true"
            eww update minute-active="true"
            sleep 2
            eww update timer-visible="false"
            eww update minute-active="false"
        fi

        until_next_min=$(( 60 - $(date +%-S) ))
        sleep "$until_next_min"
        timer "down" 1
    done
}


reset () {
    case "$1" in
        alarm)
            ps -ef | rg alarm_status | grep -v grep | awk '{print $2}' | xargs kill
            echo "00:00" > "/tmp/eww/alarm"
            notify-send "alarm reset"
        ;;
        timer)
            ps -ef | rg timer_status | grep -v grep | awk '{print $2}' | xargs kill
            echo "00:00" > "/tmp/eww/timer"
            notify-send "timer reset"
        ;;
    esac

}

"$@"
