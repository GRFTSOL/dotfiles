snippet "([0-9]*)qq" "question" rwA
# --- Question `!p snip.rv=match.group(1)` --- #
print("\n" + "-" * 19)
print("Question `!p snip.rv=match.group(1)`:\n")

$0

print("\n" + "-" * 19)
endsnippet

snippet symbols "sympy sybmlols" bA
a, b, c, d, e, x, y, z, t = sp.symbols('a b c d e x y z t')
k, m, n = sp.symbols('k m n', integer=True)
f, g, h = sp.symbols('f g h', cls=Function)
$0
endsnippet

snippet bimport "basic import" bA
import numpy as np
import sympy as sp
endsnippet

snippet mtx "matrix" bA
$1 = np.array(
		[
				[$2, $3, $4],
				[$5, $6, $7],
				[$8, $9, $10],
		]
)

$0
endsnippet

snippet smtx "symbolic matrix" bA
$1 = sp.Matrix(
		[
				[$2, $3, $4],
				[$5, $6, $7]k
				[$8, $9, $10],
		]
)

$0
endsnippet

snippet ptt "print" bA
print($1, "\n")
$0
endsnippet

snippet ptsm "print symbolic matrix" bA
print(np.array($1), "\n")
$0
endsnippet

snippet rref "rref" iA
.rref()[0]
endsnippet

snippet fixfrac "fix fractions" bA
with np.printoptions(formatter={'all':lambda x: str(Fraction(x).limit_denominator())}):
		print($1)
endsnippet

snippet '([A-Za-z]*)nin' "numpy inverse" wrA
np.linalg.inv(`!p snip.rv = match.group(1)`)
endsnippet

